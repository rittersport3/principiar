)]}'
{"version":3,"file":"/packages/observatory-apollo.js","sources":["observatory-apollo/lib/MeteorLogger.coffee","observatory-apollo/lib/TLog.coffee","observatory-apollo/lib/Observatory.coffee","observatory-apollo/lib/client/templates.coffee"],"names":[],"mappings":"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","sourcesContent":["Observatory = @Observatory ? {}\n\nclass Observatory.MeteorLogger extends Observatory.Logger\n  constructor: (@name, @colName = '_observatory_logs', connection = null) ->\n    super @name\n    @_logsCollection = new Meteor.Collection @colName\n    # can't update logs; setting up pointers to insert and remove allow functions\n    if Meteor.isServer\n      @_logsCollection.allow \n        update: (uid)-> false\n        insert: (uid)=> @allowInsert uid\n        remove: (uid)=> @allowRemove uid\n    \n      \n    \n      \n    \n  # redefine these functions anytime on server side to be able to control what gets logged -\n  # useful when in production and want to control what comes from the clients:\n  # Observatory._meteorLogger.allowInsert = (uid) -> ...\n  allowInsert: (uid)-> true\n  allowRemove: (uid)-> false\n    \n  # overriding the main logging method\n  log: (message)->\n  \t#console.log \"Logging in Meteor Client\"\n  \tmsg = message # do we really need the clone thing??\n  \tmsg.userId = @_checkUserId()\n  \t#console.log msg\n  \t@_logsCollection.insert msg\n\n\n  # helper method to get userId\n  # TODO: think how to get to it if we are in publish()\n  # TODO: Needs testing!\n  # TODO: Maybe just record uid and display actual user info when, uhm, displaying logs?\n  _checkUserId: ->\n    try\n      uid = this.userId ? Meteor.userId()\n    catch err\n    uid\n\n  \n(exports ? this).Observatory = Observatory","###################################################################################################\n# Backward compatibility stuff!!!\n# TLog is deprecated\n####################################################################################################\n  \nclass TLog\n  @getLogger:-> \n    tb = Observatory.getToolbox()\n    tb.dir = (obj, message, module)->\n      msg = if message then message else \"Inspecting object:\"\n      @_emitWithSeverity Observatory.LOGLEVEL.VERBOSE, msg, @inspect obj, module\n    tb.setOptions = @setOptions\n    tb\n  @allowRemove: (f)-> Observatory.getMeteorLogger().allowRemove f\n  @publish: (f)-> Observatory.meteorServer.publish f\n  @_getLogs: (sort)-> Observatory.getMeteorLogger()._logsCollection.find {}, sort: timestamp: -1\n\n\n  @LOGLEVEL_FATAL = 0\n  @LOGLEVEL_ERROR = 1\n  @LOGLEVEL_WARNING = 2\n  @LOGLEVEL_INFO = 3\n  @LOGLEVEL_VERBOSE = 4\n  @LOGLEVEL_DEBUG = 5\n  @LOGLEVEL_MAX = 6\n\n  @LOGLEVEL_NAMES = [\n    \"fatal\", \"error\", \"warning\", \"info\", \"verbose\", \"debug\", \"max\"\n  ]\n  @LOGLEVEL_NAMES_CAPS = [\n    \"FATAL\", \"ERROR\", \"WARNING\", \"INFO\", \"VERBOSE\", \"DEBUG\", \"MAX\"\n  ]\n  @LOGLEVEL_NAMES_SHORT = [\n    \"ftl\", \"err\", \"wrn\", \"inf\", \"vrb\", \"dbg\",\"max\"\n  ]\n\n  # Set options for a logger\n  #\n  # @param [TLog enum] loglevel desired (see getLogger())\n  # @param [Bool] whether to print to the console\n  #\n  @setOptions: (loglevel, want_to_print = true, log_user = true, log_http = true, log_DDP = true) ->\n    settings = \n      maxSeverity: loglevel\n      printToConsole: want_to_print\n      logUser: log_user\n      logHttp: log_http\n      logDDP: log_DDP\n    Observatory.setSettings settings\n    \n\n  \n(exports ? this).TLog = TLog\n#(exports ? this).Observatory = @Observatory\n","Observatory = @Observatory ? {}\n\n###\nSettings format:\n\n{\n    \"public\": {\n        \"observatorySettings\": {\n            \"logsCollectionName\": \"_observatory_logs\",\n            \"logLevel\": \"DEBUG\",\n            \"printToConsole\": true,\n            \"logUser\": true,\n            \"logHttp\": true,\n            \"logDDP\": true,\n            \"prohibitAutoPublish\": false\n        }\n    }\n}\n###\n\n# wrapping subscription function if somebody wants to use locally\nObservatory.subscribe = (numOfLogs)->\n  Meteor.subscribe @settings.logsCollectionName, numOfLogs ? 50 if Meteor.isClient\n\n# changing server definition function to meteor specific\nObservatory.isServer = -> Meteor.isServer\n# defining getter for the meteor logger\nObservatory.getMeteorLogger = -> Observatory._meteorLogger\n# adjusting initialize to read Meteor.settings\nObservatory.initialize = _.wrap Observatory.initialize, (f, s)->\n  s = Meteor.settings?.public?.observatorySettings unless s?\n  f.call Observatory, s\n# extending the settings changing function\nObservatory.setSettings = _.wrap Observatory.setSettings, (f, s)->\n  # calling base function\n  f.call Observatory, s\n  # don't allow collection name change on the fly? Autopublishing is impossible to change without restart. \n  # If you want granular control over how logs collection is being published, use the server\n  # @settings.logsCollectionName = s?.logsCollectionName ? @settings.logsCollectionName\n  @settings.logUser = s.logUser ? @settings.logUser\n  @settings.logHttp = s?.logHttp ? @settings.logHttp\n  @settings.logDDP = s?.logDDP ? @settings.logDDP\n\n# adding meteor-specific initialization\nObservatory.registerInitFunction (s)->\n  \n  @settings.logsCollectionName = s?.logsCollectionName ? '_observatory_logs'\n  @settings.logUser = s?.logUser ? true\n  @settings.logHttp = s?.logHttp ? true\n  @settings.logDDP = s?.logDDP ? false\n  @settings.prohibitAutoPublish = s?.prohibitAutoPublish ? false\n  \n  # setting up client / server meteor loggers\n  #console.log @settings\n  @_meteorLogger = new Observatory.MeteorLogger 'Meteor Logger', @settings.logsCollectionName\n  @subscribeLogger @_meteorLogger\n  \n  # adding Observatory Server and publishing logs if not forbidden explicitly\n  if Meteor.isServer\n\n    #console.log Meteor.absoluteUrl()\n\n    @meteorServer = new Observatory.Server \n    @meteorServer.publish() unless @settings.prohibitAutoPublish\n    @emitters.DDP = Observatory.DDPEmitter.de 'DDP'\n    @emitters.Http = new Observatory.HttpEmitter 'HTTP'\n    @emitters.Monitor = new Observatory.MonitoringEmitter 'Monitor'\n    # setting up buffers checks for http and DDP logging\n    Meteor.setInterval ->\n      m = Observatory.getMeteorLogger()\n      m.processBuffer()\n    , 3000\n\n  else\n    Meteor.subscribe @settings.logsCollectionName unless @settings.prohibitAutoPublish\n\n\nObservatory.initialize()\n\n###\nif Meteor.isServer\n  Observatory._meteorLogger.allowInsert = (uid)->\n    console.log \"Trying to insert for \" + uid\n    true\n###\n      \n\n(exports ? this).Observatory = Observatory","###\nTemplate.newPost.rendered = _.wrap Template.newPost.rendered, (func)->\n  console.log \"Injection successful!!!\"\n  console.log this\n  func.apply this\n###\n\nObservatory = @Observatory ? {}\n\n_.extend Observatory,\n\n  getTemplateNames: (includeHidden = false)->\n    ret = []\n    for k,v of Template\n      ret.push k unless k.indexOf('_') is 0\n    ret\n\n  getTemplate: (name)->_.find Template, (k,v)-> v is name\n\n  getEvents: (name)-> @getTemplate(name)?._tmpl_data.events\n  getHelpers: (name)-> @getTemplate(name)?._tmpl_data.helpers\n\n  logAll: ->\n    @logTemplates()\n    @logMeteor()\n\n  logTemplates: ->\n    console.log \"logging templates now\"\n    names = @getTemplateNames()\n    console.log names\n    callbacks = ['created','rendered','destroyed']\n    for t in names\n      for c in callbacks\n        if Template[t][c]?\n          Template[t][c] = _.wrap Template[t][c], (f)->\n            tl = TLog.getLogger()\n            tl.debug \"#{c} call started\", \"Template.#{t}\"\n            f.apply this\n            tl.debug \"#{c} call finished\", \"Template.#{t}\"\n        else\n          Template[t][c] = ->\n            tl = TLog.getLogger()\n            tl.debug \"#{c} called - not defined by user\", \"Template.#{t}\"\n\n\n\n  logCollection: ->\n    sync = ['find','findOne']\n    async = ['insert','update','remove']\n    #console.log Meteor.Collection::\n\n    # Ok, can't call insert etc inside collection methods - problem is, TLog collection\n    # is created from Collection as well, so it goes crazy. Need to make sure we are not\n    # applying this to TLog, but not sure how so far --\n    # One option is just store this stuff in the buffer, as with http logs\n    # and then process it, checking when processing not to add the logs if it's about TLog\n    for m in sync\n      Meteor.Collection::[m] = _.wrap Meteor.Collection::[m], (f)->\n        console.log \"#{m} call started\", \"Collection.#{@_name}\"\n        console.log arguments\n        ret = f.apply this, _.rest(arguments)\n        console.log \"#{m} call finished\", \"Collection.#{@_name}\"\n        ret\n\n\n  # for now, only subscribe\n  logMeteor: ->\n    #console.log \"logging Meteor\"\n    #console.log Meteor.subscribe\n\n    Meteor.subscribe = _.wrap Meteor.subscribe, (f)->\n      #console.log \"hmm...\"\n      #console.log arguments\n      tl = Observatory.getToolbox()\n      name = arguments[1]\n      tl.verbose \"Subscribing to #{name}\", \"Meteor\"\n\n      # some funky stuff to wrap original callbacks\n      last = _.last arguments\n      changeLast = false\n      if typeof last is 'object'\n        if last.onReady?\n          origOnReady = last.onReady\n          changeLast = true\n        if last.onError?\n          origOnError = last.onError\n          changeLast = true\n      else\n        if typeof last is 'function'\n          origOnReady = last\n          changeLast = true\n\n      cb =\n        onReady: =>\n          t = Date.now() - Session.get \"_obs.subscription.#{name}.profileStart\"\n          tl.profile \"Subscription ready for #{name} in #{t} ms\", t, {subscription: name, type: 'subscription'}\n          origOnReady() if origOnReady?\n        onError: (err)=>\n          t = Date.now() - Session.get \"_obs.subscription.#{name}.profileStart\"\n          tl.error \"Error while subscribing to #{name}: \" + err.reason, {error: err, subscription: name, timeElapsed: t, type: 'subscription'}\n          origOnError(err) if origOnError?\n\n      args = _.rest arguments\n\n      if changeLast then args[args.length - 1] = cb # replacing original callbacks\n      else args.push cb # adding callbacks\n\n      #console.log args\n\n      Session.set \"_obs.subscription.#{name}.profileStart\", Date.now()\n      f.apply this, args\n\n\n\n(exports ? this).Observatory = Observatory"]}