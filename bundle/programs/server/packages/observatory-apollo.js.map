{"version":3,"file":"/packages/observatory-apollo.js","sources":["observatory-apollo/lib/server/ObservatoryServer.coffee","observatory-apollo/lib/server/DDPEmitter.coffee","observatory-apollo/lib/server/HttpEmitter.coffee","observatory-apollo/lib/server/MonitoringEmitter.coffee","observatory-apollo/lib/MeteorLogger.coffee","observatory-apollo/lib/TLog.coffee","observatory-apollo/lib/Observatory.coffee","observatory-apollo/lib/monitoringHooks.coffee"],"names":[],"mappings":"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","sourcesContent":["Observatory = @Observatory ? {}\n\n# Class that publishes logs, manages relations with clients, sets up monitors etc\n# heart of Observatory operations in Meteor\nclass Observatory.Server \n  handshake: -> \n    o = \n      version: Observatory.version\n      settings: Observatory.settings\n      monitoring: Observatory.emitters.Monitor.isRunning\n      heartbeat: @heartbeat()\n\n  heartbeat: ->\n    @monitor = @monitor ? new Observatory.MonitoringEmitter\n    @monitor.measure()\n  \n  # func should return whether we allow publishing or not\n  # This is the heart of Vega operations - publishing all necessary data to the client\n  publish: (func)->\n  \n    canPublish = if func? then func.call this, @userId else true\n    return unless canPublish\n    \n    # publishing logs\n    Meteor.publish Observatory.settings.logsCollectionName, (numInPage = 300, pageNumber = 0)->\n      #console.log \"trying to publish logs with #{numInPage}\"\n      cl = Observatory.getMeteorLogger()._logsCollection\n      cr = cl.find({type: {$ne: 'monitor'}}, {sort: {timestamp: -1}, limit: numInPage})\n\n    # funky stuff - publishing specific query, just the monitoring logs\n    Meteor.publish '_observatory_monitoring', (numInPage = 100, pageNumber = 0)->\n      #console.log \"trying to publish monitoring\"\n      cl = Observatory.getMeteorLogger()._logsCollection\n      #initializing = true\n      handle = cl.find({type: 'monitor'}, {sort: {timestamp: -1}, limit: numInPage}).observe {\n        added: (doc)=>\n          @added('_observatory_monitoring', doc._id, doc) #unless initializing\n      }\n      #initializing = false\n      @ready()\n      @onStop = -> handle.stop()\n\n    # just the http logs - for web visits analysis, will need to move to aggregation queries eventually\n    Meteor.publish '_observatory_http_logs', (numInPage = 100, pageNumber = 0)->\n      #console.log \"trying to publish monitoring\"\n      cl = Observatory.getMeteorLogger()._logsCollection\n      #initializing = true\n      handle = cl.find({module: 'HTTP'}, {sort: {timestamp: -1}, limit: numInPage}).observe {\n        added: (doc)=>\n          @added('_observatory_http_logs', doc._id, doc) #unless initializing\n      }\n      #initializing = false\n      @ready()\n      @onStop = -> handle.stop()\n\n    # just the errors\n    Meteor.publish '_observatory_errors', (numInPage = 100, pageNumber = 0)->\n      cl = Observatory.getMeteorLogger()._logsCollection\n      handle = cl.find({severity: {$lte: 1}}, {sort: {timestamp: -1}, limit: numInPage}).observe {\n        added: (doc)=>\n          @added('_observatory_errors', doc._id, doc) \n      }\n      @ready()\n      @onStop = -> handle.stop()\n      \n\n\n################################################################################################################################################\n# METHODS\n#################################################################################################################################################\n\nMeteor.methods\n  # called by Vega to check the heartbeat\n  _observatoryHeartbeat: -> Observatory.meteorServer.heartbeat()\n  _observatoryHandshake: -> Observatory.meteorServer.handshake()\n  \n(exports ? this).Observatory = Observatory","###\n                            { _session:\nI20130905-05:17:30.934(2)?    { session_id: undefined,\nI20130905-05:17:30.934(2)?      heartbeat_delay: 25000,\nI20130905-05:17:30.934(2)?      disconnect_delay: 60000,\nI20130905-05:17:30.934(2)?      prefix: '/sockjs',\nI20130905-05:17:30.934(2)?      send_buffer: [],\nI20130905-05:17:30.934(2)?      is_closing: false,\nI20130905-05:17:30.935(2)?      readyState: 1,\nI20130905-05:17:30.935(2)?      timeout_cb: [Function],\nI20130905-05:17:30.935(2)?      to_tref:\nI20130905-05:17:30.935(2)?       { _idleTimeout: 25000,\nI20130905-05:17:30.935(2)?         _idlePrev: [Object],\nI20130905-05:17:30.935(2)?         _idleNext: [Object],\nI20130905-05:17:30.935(2)?         _onTimeout: [Function],\nI20130905-05:17:30.936(2)?         _idleStart: Thu Sep 05 2013 05:17:30 GMT+0200 (CEST) },\nI20130905-05:17:30.936(2)?      connection: [Circular],\nI20130905-05:17:30.936(2)?      emit_open: null,\nI20130905-05:17:30.936(2)?      recv:\nI20130905-05:17:30.936(2)?       { ws: [Object],\nI20130905-05:17:30.936(2)?         connection: [Object],\nI20130905-05:17:30.936(2)?         thingy: [Object],\nI20130905-05:17:30.936(2)?         thingy_end_cb: [Function],\nI20130905-05:17:30.937(2)?         session: [Circular] } },\nI20130905-05:17:30.937(2)?   id: '166cd531-78c6-46de-ab03-bcbbffcc211a',\nI20130905-05:17:30.937(2)?   headers:\nI20130905-05:17:30.937(2)?    { 'x-forwarded-for': '127.0.0.1',\nI20130905-05:17:30.937(2)?      host: 'localhost:3000',\nI20130905-05:17:30.937(2)?      'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1612.2 Safari/537.36' },\nI20130905-05:17:30.937(2)?   prefix: '/sockjs',\nI20130905-05:17:30.937(2)?   remoteAddress: '127.0.0.1',\nI20130905-05:17:30.937(2)?   remotePort: 60091,\nI20130905-05:17:30.938(2)?   address: { address: '127.0.0.1', family: 'IPv4', port: 3001 },\nI20130905-05:17:30.938(2)?   url: '/sockjs/649/gd5r5hlq/websocket',\nI20130905-05:17:30.938(2)?   pathname: '/sockjs/649/gd5r5hlq/websocket',\nI20130905-05:17:30.938(2)?   protocol: 'websocket',\nI20130905-05:17:30.938(2)?   send: [Function],\nI20130905-05:17:30.938(2)?   _events:\nI20130905-05:17:30.938(2)?    { close: [ [Function], [Function], [Function] ],\nI20130905-05:17:30.938(2)?      data: [ [Function], [Function] ] },\nI20130905-05:17:30.939(2)?   meteor_session:\nI20130905-05:17:30.939(2)?    { id: 'D3zzXacJbKvnNTnnx',\nI20130905-05:17:30.939(2)?      server:\nI20130905-05:17:30.939(2)?       { publish_handlers: [Object],\nI20130905-05:17:30.939(2)?         universal_publish_handlers: [Object],\nI20130905-05:17:30.939(2)?         method_handlers: [Object],\nI20130905-05:17:30.939(2)?         sessions: [Object],\nI20130905-05:17:30.940(2)?         stream_server: [Object] },\nI20130905-05:17:30.940(2)?      version: 'pre1',\nI20130905-05:17:30.940(2)?      initialized: true,\nI20130905-05:17:30.940(2)?      socket: [Circular],\nI20130905-05:17:30.940(2)?      last_connect_time: 1378351050610,\nI20130905-05:17:30.940(2)?      last_detach_time: 1378351050610,\nI20130905-05:17:30.940(2)?      in_queue: [],\nI20130905-05:17:30.940(2)?      blocked: false,\nI20130905-05:17:30.941(2)?      worker_running: true,\nI20130905-05:17:30.941(2)?      out_queue: [],\nI20130905-05:17:30.941(2)?      result_cache: { '1': [Object] },\nI20130905-05:17:30.941(2)?      _namedSubs:\nI20130905-05:17:30.941(2)?       { DpAD9GEcSQbjS7fiP: [Object],\nI20130905-05:17:30.941(2)?         fJ3Smtz87FD99ceTx: [Object],\nI20130905-05:17:30.941(2)?         JbtrhYsje6wvaDWAv: [Object],\nI20130905-05:17:30.941(2)?         gYELfh74gyrJjfkNo: [Object] },\nI20130905-05:17:30.941(2)?      _universalSubs: [ [Object] ],\nI20130905-05:17:30.942(2)?      userId: null,\nI20130905-05:17:30.942(2)?      sessionData: {},\nI20130905-05:17:30.942(2)?      collectionViews:\nI20130905-05:17:30.942(2)?       { _observatory_logs: [Object],\nI20130905-05:17:30.942(2)?         meteor_accounts_loginServiceConfiguration: [Object],\nI20130905-05:17:30.942(2)?         posts: [Object] },\nI20130905-05:17:30.942(2)?      _isSending: true,\nI20130905-05:17:30.942(2)?      _dontStartNewUniversalSubs: false,\nI20130905-05:17:30.942(2)?      _pendingReady: [] } }\n\n###\n\nObservatory = @Observatory ? {}\n\nclass Observatory.DDPEmitter extends @Observatory.MessageEmitter\n  @messageStub: ->\n    options =\n      isServer: true\n      severity: Observatory.LOGLEVEL.DEBUG\n      module: \"DDP\"\n      timestamp: new Date\n    options\n\n  @_instance = undefined\n\n  # getter for the instance\n  @de: => \n    @_instance?= new Observatory.DDPEmitter \"DDP Emitter\"\n    @_instance\n\n  constructor: (@name, @formatter)->\n    #console.log \"DDPEmitter::constructor #{name}\"\n    super @name, @formatter\n    if Observatory.DDPEmitter._instance? then throw new Error \"Attempted to create another instance of DDPEmitter and it is a really bad idea\"\n    # registering to listen to socket events with Meteor\n    Meteor.default_server.stream_server.register (socket)->\n      return unless Observatory.DDPEmitter.de().isOn and Observatory.settings.logDDP\n      msg = Observatory.DDPEmitter.messageStub()\n      msg.socketId = socket.id\n      msg.textMessage = \"Connected socket #{socket.id}\" \n      # emitting message and putting to the buffer for the sake of Meteor logging. Insensitive loggers, such as Console,\n      # should actually ignore this\n      #console.log msg\n      Observatory.DDPEmitter.de().emitMessage msg, true\n\n      socket.on 'data', (raw_msg)->\n        return unless Observatory.DDPEmitter.de().isOn and Observatory.settings.logDDP\n        msg = Observatory.DDPEmitter.messageStub()\n        msg.socketId = @id\n        msg.textMessage = \"Got message in a socket #{@id}\"\n        msg.object = raw_msg\n        msg.type = \"DDP\"\n        #console.log msg\n        Observatory.DDPEmitter.de().emitMessage msg, true\n      \n      socket.on 'close', ->\n        return unless Observatory.DDPEmitter.de().isOn and Observatory.settings.logDDP\n        msg = Observatory.DDPEmitter.messageStub()\n        msg.socketId = socket.id\n        msg.textMessage = \"Closed socket #{socket.id}\" \n        #console.log msg\n        Observatory.DDPEmitter.de().emitMessage msg, true\n\n    \n        \n\n\n(exports ? this).Observatory = Observatory","Observatory = @Observatory ? {}\n\nclass Observatory.HttpEmitter extends @Observatory.MessageEmitter\n  \n  httpLogger: (req, res, next) =>\n    if @isOff or (not Observatory.settings.logHttp)\n      next()\n      return\n\n    req._startTime = new Date\n    end = res.end\n\n    res.end = (chunk, encoding) =>\n      res.end = end\n      res.end chunk, encoding\n\n      # TODO: LOG HERE!!!\n      obj =\n        url: req.originalUrl or req.url\n        method: req.method\n        referrer: req.headers[\"referer\"] or req.headers[\"referrer\"]\n        remoteAddress:\n          if req.ip\n            req.ip\n          else\n            if req.socket.socket\n              req.socket.socket.remoteAddress\n            else\n              req.socket.remoteAddress\n        status: res.statusCode\n        httpVersion: req.httpVersionMajor + \".\" + req.httpVersionMinor\n        userAgent: req.headers[\"user-agent\"]\n        #contentLength: parseInt(res.getHeader('Content-Length'), 10)\n        responseHeader: res._header\n        acceptLanguage: req.headers['accept-language']\n        forwardedFor: req.headers['x-forwarded-for']\n        #requestHeaders: req.headers\n        timestamp: new Date\n        responseTime: new Date - req._startTime\n\n      #console.dir obj\n      @emitFormattedMessage obj, true\n    next()\n\n  constructor: (@name)->\n\n    @formatter = (l)->\n      msg = \"#{l.method} #{l.url}: #{l.status} from #{l.forwardedFor} in #{l.responseTime} ms\" #\"#{l.method} #{l.url}: #{l.status} in #{l.responseTime} ms\\n#{l.userAgent}\\n#{l.responseHeader}\\nreferrer: #{l.referrer?}\"\n      severity = Observatory.LOGLEVEL.VERBOSE\n      if l.status >= 500 then severity = Observatory.LOGLEVEL.FATAL\n      else\n        if l.status >= 400\n          severity = Observatory.LOGLEVEL.ERROR\n        else\n          if l.status >= 300 then severity = Observatory.LOGLEVEL.WARNING\n      options =\n        isServer: true\n        textMessage: msg\n        module: \"HTTP\"\n        timestamp: l.timestamp\n        severity: severity\n        ip: l.forwardedFor #l.remoteAddress\n        elapsedTime: l.responseTime # e.g., response time for http or method running time for profiling functions\n        object: l # recording original message in full\n      options\n\n    super @name, @formatter\n    # hooking up into Connect middleware\n    WebApp.connectHandlers.use @httpLogger\n    \n    \n        \n\n\n(exports ? this).Observatory = Observatory","util = Npm.require 'util'\nos = Npm.require 'os'\n\nObservatory = @Observatory ? {}\n\nclass Observatory.MonitoringEmitter extends @Observatory.MessageEmitter\n  # doesn't belong here!!!\n  sysInfo: ->\n    console.dir os.cpus()\n    console.log os.hostname(), os.type(), os.platform(), os.arch(), os.release()\n    console.log os.networkInterfaces()\n\n  measure: ->\n    obj = \n      procMemUse: process.memoryUsage()\n      osUptime: os.uptime()\n      procUptime: process.uptime()\n      loadavg: os.loadavg()\n      totalmem: os.totalmem()\n      freemem: os.freemem()\n    \n    \n  secondsToString = (seconds) ->\n    numdays = Math.floor(seconds / 86400)\n    numhours = Math.floor((seconds % 86400) / 3600)\n    numminutes = Math.floor(((seconds % 86400) % 3600) / 60)\n    numseconds = ((seconds % 86400) % 3600) % 60\n    numdays + \" days \" + numhours + \" hours \" + numminutes + \" minutes \" + numseconds + \" seconds\"\n\n\n  constructor: (@name)->\n    # Map of the current sessions\n    @name = name ? 'Monitor'\n    @_sessions = []\n    @isRunning = false\n    @_monitorHandle = null\n    super @name\n\n  # Starting the monitoring process with timePeriod\n  # Restarts in case it's already running\n  # TODO: write the actual logic\n  startMonitor: (timePeriod)->\n    @stopMonitor if @isRunning\n    timePeriod = timePeriod ? 60000\n    @_monitorHandle = Meteor.setInterval =>\n      currentSessions = Meteor.call \"_observatoryGetOpenSessions\"\n      obj = @measure()\n      obj.currentSessionNumber = currentSessions?.length\n      msg = \n        isServer: true\n        timestamp: new Date\n        module: 'Monitor'\n        type: 'monitor'\n        severity: Observatory.LOGLEVEL.INFO\n        object: obj\n        textMessage: \"Monitoring every #{timePeriod / 1000}s\"\n\n      @emitMessage msg\n      @isRunning = true\n    , timePeriod\n\n  # Stopping the monitoring process\n  stopMonitor: ->\n    if @isRunning\n      Meteor.clearInterval @_monitorHandle\n      @isRunning = false\n\n  # converting session into logging options\n  sessionToLoggingOptions: (session)->\n    o =\n      timestamp: null\n    o\n\n\n(exports ? this).Observatory = Observatory","Observatory = @Observatory ? {}\n\nclass Observatory.MeteorLogger extends Observatory.Logger\n  constructor: (@name, @colName = '_observatory_logs', connection = null) ->\n    super @name\n    @_logsCollection = new Meteor.Collection @colName\n    # can't update logs; setting up pointers to insert and remove allow functions\n    if Meteor.isServer\n      @_logsCollection.allow \n        update: (uid)-> false\n        insert: (uid)=> @allowInsert uid\n        remove: (uid)=> @allowRemove uid\n    \n      \n    \n      \n    \n  # redefine these functions anytime on server side to be able to control what gets logged -\n  # useful when in production and want to control what comes from the clients:\n  # Observatory._meteorLogger.allowInsert = (uid) -> ...\n  allowInsert: (uid)-> true\n  allowRemove: (uid)-> false\n    \n  # overriding the main logging method\n  log: (message)->\n  \t#console.log \"Logging in Meteor Client\"\n  \tmsg = message # do we really need the clone thing??\n  \tmsg.userId = @_checkUserId()\n  \t#console.log msg\n  \t@_logsCollection.insert msg\n\n\n  # helper method to get userId\n  # TODO: think how to get to it if we are in publish()\n  # TODO: Needs testing!\n  # TODO: Maybe just record uid and display actual user info when, uhm, displaying logs?\n  _checkUserId: ->\n    try\n      uid = this.userId ? Meteor.userId()\n    catch err\n    uid\n\n  \n(exports ? this).Observatory = Observatory","###################################################################################################\n# Backward compatibility stuff!!!\n# TLog is deprecated\n####################################################################################################\n  \nclass TLog\n  @getLogger:-> \n    tb = Observatory.getToolbox()\n    tb.dir = (obj, message, module)->\n      msg = if message then message else \"Inspecting object:\"\n      @_emitWithSeverity Observatory.LOGLEVEL.VERBOSE, msg, @inspect obj, module\n    tb.setOptions = @setOptions\n    tb\n  @allowRemove: (f)-> Observatory.getMeteorLogger().allowRemove f\n  @publish: (f)-> Observatory.meteorServer.publish f\n  @_getLogs: (sort)-> Observatory.getMeteorLogger()._logsCollection.find {}, sort: timestamp: -1\n\n\n  @LOGLEVEL_FATAL = 0\n  @LOGLEVEL_ERROR = 1\n  @LOGLEVEL_WARNING = 2\n  @LOGLEVEL_INFO = 3\n  @LOGLEVEL_VERBOSE = 4\n  @LOGLEVEL_DEBUG = 5\n  @LOGLEVEL_MAX = 6\n\n  @LOGLEVEL_NAMES = [\n    \"fatal\", \"error\", \"warning\", \"info\", \"verbose\", \"debug\", \"max\"\n  ]\n  @LOGLEVEL_NAMES_CAPS = [\n    \"FATAL\", \"ERROR\", \"WARNING\", \"INFO\", \"VERBOSE\", \"DEBUG\", \"MAX\"\n  ]\n  @LOGLEVEL_NAMES_SHORT = [\n    \"ftl\", \"err\", \"wrn\", \"inf\", \"vrb\", \"dbg\",\"max\"\n  ]\n\n  # Set options for a logger\n  #\n  # @param [TLog enum] loglevel desired (see getLogger())\n  # @param [Bool] whether to print to the console\n  #\n  @setOptions: (loglevel, want_to_print = true, log_user = true, log_http = true, log_DDP = true) ->\n    settings = \n      maxSeverity: loglevel\n      printToConsole: want_to_print\n      logUser: log_user\n      logHttp: log_http\n      logDDP: log_DDP\n    Observatory.setSettings settings\n    \n\n  \n(exports ? this).TLog = TLog\n#(exports ? this).Observatory = @Observatory\n","Observatory = @Observatory ? {}\n\n###\nSettings format:\n\n{\n    \"public\": {\n        \"observatorySettings\": {\n            \"logsCollectionName\": \"_observatory_logs\",\n            \"logLevel\": \"DEBUG\",\n            \"printToConsole\": true,\n            \"logUser\": true,\n            \"logHttp\": true,\n            \"logDDP\": true,\n            \"prohibitAutoPublish\": false\n        }\n    }\n}\n###\n\n# wrapping subscription function if somebody wants to use locally\nObservatory.subscribe = (numOfLogs)->\n  Meteor.subscribe @settings.logsCollectionName, numOfLogs ? 50 if Meteor.isClient\n\n# changing server definition function to meteor specific\nObservatory.isServer = -> Meteor.isServer\n# defining getter for the meteor logger\nObservatory.getMeteorLogger = -> Observatory._meteorLogger\n# adjusting initialize to read Meteor.settings\nObservatory.initialize = _.wrap Observatory.initialize, (f, s)->\n  s = Meteor.settings?.public?.observatorySettings unless s?\n  f.call Observatory, s\n# extending the settings changing function\nObservatory.setSettings = _.wrap Observatory.setSettings, (f, s)->\n  # calling base function\n  f.call Observatory, s\n  # don't allow collection name change on the fly? Autopublishing is impossible to change without restart. \n  # If you want granular control over how logs collection is being published, use the server\n  # @settings.logsCollectionName = s?.logsCollectionName ? @settings.logsCollectionName\n  @settings.logUser = s.logUser ? @settings.logUser\n  @settings.logHttp = s?.logHttp ? @settings.logHttp\n  @settings.logDDP = s?.logDDP ? @settings.logDDP\n\n# adding meteor-specific initialization\nObservatory.registerInitFunction (s)->\n  \n  @settings.logsCollectionName = s?.logsCollectionName ? '_observatory_logs'\n  @settings.logUser = s?.logUser ? true\n  @settings.logHttp = s?.logHttp ? true\n  @settings.logDDP = s?.logDDP ? false\n  @settings.prohibitAutoPublish = s?.prohibitAutoPublish ? false\n  \n  # setting up client / server meteor loggers\n  #console.log @settings\n  @_meteorLogger = new Observatory.MeteorLogger 'Meteor Logger', @settings.logsCollectionName\n  @subscribeLogger @_meteorLogger\n  \n  # adding Observatory Server and publishing logs if not forbidden explicitly\n  if Meteor.isServer\n\n    #console.log Meteor.absoluteUrl()\n\n    @meteorServer = new Observatory.Server \n    @meteorServer.publish() unless @settings.prohibitAutoPublish\n    @emitters.DDP = Observatory.DDPEmitter.de 'DDP'\n    @emitters.Http = new Observatory.HttpEmitter 'HTTP'\n    @emitters.Monitor = new Observatory.MonitoringEmitter 'Monitor'\n    # setting up buffers checks for http and DDP logging\n    Meteor.setInterval ->\n      m = Observatory.getMeteorLogger()\n      m.processBuffer()\n    , 3000\n\n  else\n    Meteor.subscribe @settings.logsCollectionName unless @settings.prohibitAutoPublish\n\n\nObservatory.initialize()\n\n###\nif Meteor.isServer\n  Observatory._meteorLogger.allowInsert = (uid)->\n    console.log \"Trying to insert for \" + uid\n    true\n###\n      \n\n(exports ? this).Observatory = Observatory","#require = if Npm? then Npm.require else __meteor_bootstrap__.require\n#Fiber = require 'fibers'\n\n#console.log Meteor.default_server.stream_server\n\nMeteor.userIP = (uid)->\n  ret = {}\n  uid = uid ? Meteor.userId()\n  if uid?\n    s = ss for k, ss of Meteor.default_server.sessions when ss.userId is uid\n    if s\n      ret.forwardedFor = s.socket?.headers?['x-forwarded-for']\n      ret.remoteAddress = s.socket?.remoteAddress\n  ret\n\n\n# Ok, we can register handler for every new connecting socket, we can analyze all current meteor sessions\nMeteor.default_server.stream_server.register (socket)->\n  ###\n  console.log \"SOCKET Connect! ----------------------------->\"\n  socket.on 'data', (raw_msg)->\n    console.log 'Got message in a socket: --------->', @id\n    console.log raw_msg\n  socket.on 'close', ->\n    console.log \"Closing socket #{@id}\"\n\n  console.dir socket\n  console.log \"METEOR SESSION: ----------------------------->\"\n  Meteor.userIP()\n  console.dir socket.meteor_session\n  #console.log s.meteor_session.userId, s.meteor_session.socket.headers for s in Meteor.default_server.stream_server.open_sockets when s.meteor_session?\n  ###\n\nMeteor.methods\n  # TODO: add authorization!\n  _observatoryGetOpenSessions: ->\n    # console.log \"======================================== called observatoryGetOpenSockets ======================================\"\n    ret = []\n    #console.dir Meteor.default_server?.stream_server?.open_sockets\n    for k, socket of Meteor.default_server?.stream_server?.open_sockets #Meteor.default_server.sessions #Meteor.default_server?.stream_server?.open_sockets\n      # TODO: DO NOT delete the below as if Meteor internal API changes we'll need to look at it again!!!\n      # console.dir os.collectionViews\n      os = socket.meteor_session\n\n      # analyzing named subscriptions\n      ns = {}\n      for k1, v1 of os._namedSubs\n        ns[k1] =\n          uid: v1.userId\n          name: v1._name\n          deactivated: v1._deactivated\n          isReady: v1._ready\n          params: v1._params\n        for k,v of v1\n          if typeof(v) is 'function'\n            ns[k1][k] = v.toString()\n\n      o =\n        ddpVersion: os.version\n        sessionId: os.id\n        initialized: os.initialized\n        lastConnect: new Date os.last_connect_time\n        lastDetach: new Date os.last_detach_time\n        blocked: os.blocked\n        workerRunning: os.worker_running\n        userId: os.userId\n        sessionData: os.sessionData\n        namedSubs: ns\n\n        collectionViews: ({name: v.collectionName, id: k, docNumber: Object.keys(v.documents).length} for k,v of os.collectionViews)\n\n        headers: os.socket?.headers\n        protocol: os.socket?.protocol\n        address: os.socket?.address\n        remoteAddress: os.socket?.remoteAddress\n        remotePort: os.socket?.remotePort\n\n        isSending: os._isSending\n        pendingReady: os._pendingReady\n\n      ret.push o\n      #console.dir o\n      #console.dir os.socket._events\n      #console.dir Meteor.default_server.sessions\n    ret\n\n  _observatoryGetCurrentServer: ->\n    #console.log \"======================================== called observatoryGetOpenSockets ======================================\"\n    #console.dir Meteor.default_server\n    publishHandlers = ({name: k, func: v.toString()} for k,v of Meteor.default_server?.publish_handlers)\n    methodHandlers = ({name: k, func: v.toString()} for k,v of Meteor.default_server?.method_handlers)\n    {publishHandlers: publishHandlers, methodHandlers: methodHandlers}\n\n  _observatoryGetArbitraryObj: (line)->\n    Meteor.userIP()\n\n\n\n"]}