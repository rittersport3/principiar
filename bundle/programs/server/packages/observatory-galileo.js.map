{"version":3,"file":"/packages/observatory-galileo.js","sources":["observatory-galileo/src/Observatory.coffee","observatory-galileo/src/Toolbox.coffee"],"names":[],"mappings":"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","sourcesContent":["# ## Observatory\n# Observatory-galileo is a nodejs / client logging framework with flexible architecture.\n# It was developed as a basis for [Observatory Logging & Monitoring Suite](http://observatoryjs.com)\n# but can be used standalone independent of [Meteor](http://meteor.com).\n# Although you should *really* try Meteor. You'll love it, we promise :)\n#\n# Below is the full API documentation, useful if you want to extend the framework. If you just want to\n# jump to usage, start reading with [Generic Emitter](#abcde).\n#\n# ### Basic framework architecture notes\n# * `MessageEmitters` emit messages - either from explicit calls to `logger.debug()` etc or by in turn listening or\n# monitoring some other provider: e.g., http connect module, external log service etc. Emitters use formatters\n# (`Observatory.formatters`) -->\n# * `Formatters` form or tranform messages into predefined json format that is acceptably by -->\n# * `Loggers` receive formatted messages from emitters and either buffer them or process immediately,\n# by applying further output formatting - e.g., adding ANSI colors or html tags - and output them into\n# different out devices - console, mongo collection etc.\n\n###\n\n  # Commented out for Meteor usage\n\nrequire = if Npm? then Npm.require else require\n_ = require 'underscore'\n###\n\n# ### Constants and common definitions\nObservatory = Observatory ? {}\n\n_.extend Observatory,\n  # Log level (severity) definitions\n  LOGLEVEL:\n    SILENT: -1\n    FATAL: 0\n    ERROR: 1\n    WARNING: 2\n    INFO: 3\n    VERBOSE: 4\n    DEBUG: 5\n    MAX: 6\n    NAMES: [\"FATAL\", \"ERROR\", \"WARNING\", \"INFO\", \"VERBOSE\", \"DEBUG\", \"MAX\"]\n\n  settings:\n    maxSeverity: 3\n    printToConsole: true\n\n  # Initializing the system - creating loggers, subscribing etc\n  # Currently creates 1 ConsoleLogger and subscribes it system-wide.\n  # Also initializes default logger (Generic Emitter).\n  # TODO: add tests and settings format\n  initialize: (settings)-> f.call this, settings for f in @_initFunctions\n  registerInitFunction: (f)-> @_initFunctions.push f\n  # array of initialization functions\n  _initFunctions: [\n    (s)->\n      @_loggers = []\n      @emitters = {}\n      #console.log s\n      if s?\n        @settings.maxSeverity = if s.logLevel? then @LOGLEVEL[s.logLevel] else 3\n        @settings.printToConsole = s.printToConsole ? true\n      @_consoleLogger = new Observatory.ConsoleLogger 'default'\n      @subscribeLogger @_consoleLogger if @settings.printToConsole\n      @_defaultEmitter = new Observatory.Toolbox 'Toolbox'\n      @emitters.Toolbox = @_defaultEmitter\n      @emitters.Toolbox.maxSeverity = @settings.maxSeverity\n  ]\n\n  setSettings: (s)->\n    if s.maxSeverity?\n      @settings.maxSeverity = s.maxSeverity\n    else \n      if s.logLevel? then @settings.maxSeverity = s.logLevel\n    @emitters.Toolbox?.maxSeverity = @settings.maxSeverity\n    if s.printToConsole? and (s.printToConsole isnt @settings.printToConsole)\n      @settings.printToConsole = s.printToConsole\n      if s.printToConsole is true then @subscribeLogger @_consoleLogger else @unsubscribeLogger @_consoleLogger\n  \n  # Returns default logger to use in the app via warn(), debug() etc calls\n  getDefaultLogger: -> @_defaultEmitter\n  getToolbox: -> @_defaultEmitter\n\n  # Check if we are run on server or client.\n  # NOTE! To be overriden for Meteor based implementations!\n  isServer: -> not (typeof window isnt \"undefined\" and window.document)\n\n  # Formatters - functions that take arbitrary json and format it into a message that\n  # loggers can accept. Formatters can be chained - will be useful when implementing Meteor\n  # related stuff.\n  formatters:\n    basicFormatter: (options)->\n        timestamp: new Date\n        severity: options.severity\n        textMessage: options.message\n        # note that it's a function that gets passed around so `this` will be what we need\n        module: options.module # should the priority be reversed?\n        object: options.object ? options.obj\n        isServer: Observatory.isServer()\n        type: options.type\n\n  # View formatters take a message accepted by loggers and further format it for nice output,\n  # e.g., adding ANSI colors or html markup.\n  viewFormatters:\n    _convertDate: (timestamp, long = false)->\n      ds = timestamp.getUTCDate() + '/' + (timestamp.getUTCMonth()+1)\n      ds = ds +  + '/'+timestamp.getUTCFullYear() if long\n      ds\n    _convertTime: (timestamp, ms=true)->\n      ts = timestamp.getUTCHours()+ ':' + timestamp.getUTCMinutes() + ':' + timestamp.getUTCSeconds()\n      ts += '.' + timestamp.getUTCMilliseconds() if ms\n      ts\n    _ps: (s)-> '['+s+']'\n\n    basicConsole: (o)->\n      t = Observatory.viewFormatters\n      ts = t._ps(t._convertDate(o.timestamp)) + t._ps(t._convertTime(o.timestamp))\n      full_message = ts + if o.isServer then \"[SERVER]\" else \"[CLIENT]\"\n      full_message+= if o.module then t._ps o.module else \"[]\"\n      full_message+= t._ps(Observatory.LOGLEVEL.NAMES[o.severity]) #TODO: RANGE CHECK!!!\n      full_message+= \" #{o.textMessage}\"\n      full_message+= \" | #{JSON.stringify(o.object)}\" if o.object?\n      full_message\n\n\n  # array of system-wide subscribing loggers\n  _loggers: []\n  # get all currently listening system-wide loggers\n  getLoggers: -> @_loggers\n  # add new logger to listen to messages\n  subscribeLogger: (logger)->\n    @_loggers.push logger\n  # remove logger from the listeners\n  unsubscribeLogger: (logger)->\n    @_loggers = _.without @_loggers, logger\n\n\n# ### MessageEmitter\n# This class is the base for anything that wants to produce messages to be logged.\nclass Observatory.MessageEmitter\n  _loggers = [] # array of subscribing loggers\n\n  _getLoggers: -> @_loggers\n  \n  constructor: (@name, @formatter)->\n    #console.log \"MessageEmitter::constructor #{name}\"\n    @_loggers = []\n    @isOn = true\n    @isOff = false\n\n  # only emit messages if we are on\n  turnOn: -> @isOn = true; @isOff = false\n  turnOff: -> @isOn = false; @isOff = true\n\n  # add new logger to listen to messages\n  subscribeLogger: (logger)->\n    @_loggers.push logger\n\n  # remove logger from the listeners\n  unsubscribeLogger: (logger)->\n    @_loggers = _.without @_loggers, logger\n\n  # Translates message to be logged to all subscribed loggers.\n  # `logger` has to respond to `addMessage(msg)` call.\n  # Normally, only system-wide loggers are used, subscription for specific emitters is to provide\n  # finer-grained control.\n  emitMessage: (message, buffer = false)->\n    #console.log \"MessageEmitter::emitMessage() with buffer: #{buffer}\"\n    return unless @isOn\n    l.addMessage message, buffer for l in Observatory.getLoggers()\n    l.addMessage message, buffer for l in @_loggers if @_loggers.length > 0\n    message\n\n  emitFormattedMessage: (message, buffer = false)->\n    #console.log \"MessageEmitter::emitFormattedMessage() with buffer: #{buffer}\"\n    @emitMessage (@formatter message), buffer if @isOn and @formatter? and (typeof @formatter is 'function')\n    message\n\n# ### Logger\n# Logger listens to messages and processes them, one by one or in batches.\n# It also checks if the Emitters generate messages in the correct format described below.\nclass Observatory.Logger\n  messageBuffer = []\n\n  # * `@name` is a module name\n  # * `@useBuffer` - whether to log the messages immediately or buffer them first\n  # * `@interval` - if using buffer, how often we should process it.\n  # TODO: figure out how to use different interval-setting functions in pure js and Meteor.\n  # TODO: actual interval setup in the constructor\n  # TODO: tests for arguments shifting!!!\n  constructor: (@name, @formatter = Observatory.viewFormatters.basicConsole, @useBuffer = false, @interval = 3000)->\n    if typeof formatter is 'boolean'\n      @interval = @useBuffer\n      @useBuffer = @formatter\n      @formatter = Observatory.viewFormatters.basicConsole\n    @messageBuffer = []\n    #super\n\n  # `messageAcceptable` verifies that Emitters give messages in the format that\n  # can be recognized by this logger. At the very minimum, we are checking for\n  # timestamp, severity, client / server and either text or html formatted message to log.\n  messageAcceptable: (m)->\n    return (m? and m.timestamp? and m.severity? and m.isServer? and (m.textMessage? or m.htmlMessage?) )\n\n  # `addMessage` is the listening method that takes messages from Emitters\n  # TODO: do we really need to throw an error??? add some kind of 'strict mode'?\n  addMessage: (message, useBuffer = false)->\n    #console.log \"Logger::addMessage() with useBuffer: #{useBuffer}\"\n    throw new Error \"Unacceptable message format in logger: #{@name}\" if not @messageAcceptable message\n    if @useBuffer or useBuffer then @messageBuffer.push message else @log message\n\n  # `log` - 'virtual' function that does actual output of the message. Needs to be overriden by extending\n  # classes with e.g. logging to console or inserting into Meteor Collection. Does nothing here.\n  log: (message)->\n    throw new Error \"log() function needs to be overriden to perform actual output!\"\n\n  # processing the buffer\n  processBuffer: ->\n    return unless @messageBuffer.length > 0\n    @log obj for obj in @messageBuffer\n    @messageBuffer = []\n\n# <a name=\"abcde\"></a>\n#\n# ### GenericEmitter\n# Implements typical logging functionality to be used inside an app - log messages with various severity levels.\n\nclass Observatory.GenericEmitter extends Observatory.MessageEmitter\n\n  # Creating a named emitter with maximum severity of the messages to emit equal to `maxSeverity`\n  # and `formatter` as a formatting function. This provides flexibility on how the message to be passed on to\n  # loggers is formed. E.g., here it's given a basic format, when we'll use Meteor we'll provide a more\n  # advanced formatter that will set userId, IP address etc.\n  constructor: (name, maxSeverity, formatter)->\n    @maxSeverity = maxSeverity\n    if formatter? and typeof formatter is 'function'\n      @formatter = formatter\n    else\n      @formatter = Observatory.formatters.basicFormatter\n\n    super name, @formatter\n    # some dynamic js magic - defining different severity method aliases programmatically to be DRY.\n    # TODO: need to keep in mind bind() doesn't work in IE8 and below, but there's a\n    # [script to fix this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility)\n    for m,i in ['fatal','error','warn','info','verbose','debug','insaneVerbose']\n      @[m] = @_emitWithSeverity.bind this, i\n\n  # Trace a error - format stacktrace nicely and output with ERROR level\n  trace: (error, msg, module)->\n    message = msg + '\\n' + (error.stack ? error)\n    @_emitWithSeverity Observatory.LOGLEVEL.ERROR, message, error, module\n\n  # Low-level emitting method that formats message and emits it\n  #\n  # * `severity` - level with wich to emit a message. Won't be emitted if higher than `@maxSeverity`\n  # * `message` - text message to include into the full log message to be passed to loggers\n  # * `module` - optional module name. If the emitter is named, its' name will be used instead in any case.\n  # * `obj` - optional arbitrary json-able object to be included into full log message, e.g. error object in the call to `error`\n  _forceEmitWithSeverity: (severity, message, obj, module, type, buffer = false)->\n    if typeof message is 'object'\n      buffer = type\n      type = module\n      module = obj\n      obj = message\n      message = JSON.stringify obj\n    if typeof obj is 'string'\n      buffer = type\n      type = module\n      module = obj\n      obj = null\n\n    options = severity: severity, message: message, object: obj, type: type, module: module ? @name # explicit module overrides name\n    @emitMessage @formatter(options), buffer\n\n  _emitWithSeverity: (severity, message, obj, module, type, buffer = false)->\n    return false if not severity? or (severity > @maxSeverity)\n    @_forceEmitWithSeverity severity, message, obj, module, type, buffer\n\n# ### ConsoleLogger\n# Basic logger to the console, without any fancy stuff\nclass Observatory.ConsoleLogger extends Observatory.Logger\n  # Simply redefining log() to output messages to the console\n  log: (m)-> console.log @formatter m\n\n  # ignoring any buffering requests\n  addMessage: (message, useBuffer)->\n    #console.log \"addMessage() called for message:\"\n    #console.log message\n    throw new Error \"Unacceptable message format in logger: #{@name}\" if not @messageAcceptable message\n    @log message\n\n\n(exports ? this).Observatory = Observatory","###\n\n  # Commented out for Meteor usage\n\nif require?\n  Observatory = (require './Observatory.coffee').Observatory\n  {MessageEmitter, GenericEmitter, Logger, ConsoleLogger, LOGLEVEL} = Observatory\n###\n\n# ### Constants and common definitions\nObservatory = Observatory ? {}\n\n#console.log Observatory\n# TLog replacement?\nclass Observatory.Toolbox extends Observatory.GenericEmitter\n  #constructor: (name, maxSeverity, formatter)-> super name, maxSeverity, formatter\n\n  exec: (f, options = errors: true, profile: true, profileLoglevel: 'INFO', message: \"exec() call\", module: 'profiler' )=>\n    if typeof f isnt 'function'\n      @error \"Tried to call exec() without a function as an argument\"\n      return \n\n    obj = \n      function: f.toString()\n      type: 'profile'\n\n    @_emitWithSeverity Observatory.LOGLEVEL[options.profileLoglevel], options.message + \" starting for \" + obj.function, options.module if options.profile\n    if options.errors\n      try\n        t = Date.now()\n        ret = f.call this\n        t2 = Date.now() - t\n      catch e\n        t2 = Date.now() - t\n        @trace e\n    else\n      t = Date.now()\n      ret = f.call this\n      t2 = Date.now() - t\n\n    @profile options.message + \" done in #{t2} ms\", t2, obj, module, options.profileLoglevel if options.profile\n    ret\n\n\n  profile: (message, time, object, module = 'profiler', severity = 'VERBOSE', buffer = false)->\n    object = object ? {}\n    object.timeElapsed = time\n    @_emitWithSeverity Observatory.LOGLEVEL[severity], message, object, module, 'profile'\n\n\n  inspect: (obj, long = true, print = false)->\n    ret =\n      functions: []\n      objects: []\n      vars: []\n    for k,v of obj\n      switch typeof v\n        when 'function' then ret.functions.push key: k, value: v\n        when 'object' then ret.objects.push key: k, value: v\n        else ret.vars.push key: k, value: v\n    if print\n      for t in ['functions','objects','vars']\n        console.log \"****** PRINTING #{t} ***********\" if ret[t].length > 0\n        if long\n          console.log \"#{it.key}: #{it.value}\" for it in ret[t]\n        else\n          console.log it.key for it in ret[t]\n    #console.log ret\n    ret\n\n\n#console.log Observatory\n(exports ? this).Observatory = Observatory\n#console.log Observatory"]}